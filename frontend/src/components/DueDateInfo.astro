---
// DueDateInfo.astro - Componente para mostrar informaci√≥n de fecha l√≠mite
interface Props {
  dueDate?: string;
  showTimeRemaining?: boolean;
  compact?: boolean;
}

const { 
  dueDate, 
  showTimeRemaining = true, 
  compact = false 
} = Astro.props;

// Funci√≥n para normalizar strings de fecha (consistente con tasks.js)
const normalizeDateString = (dateStr: string) => {
  if (!dateStr) return new Date();
  
  let normalizedDateStr = dateStr;
  
  // Si es una fecha YYYY-MM-DD (sin hora), agregar T00:00:00 para evitar problemas de zona horaria
  if (/^\d{4}-\d{2}-\d{2}$/.test(normalizedDateStr)) {
    normalizedDateStr += 'T00:00:00';
  }
  
  return new Date(normalizedDateStr);
};

// Funci√≥n para calcular tiempo restante y estado
const getDueDateInfo = (dueDateStr: string) => {
  const now = new Date();
  const dueDate = normalizeDateString(dueDateStr);
  
  // Verificar si es una fecha v√°lida
  if (isNaN(dueDate.getTime())) {
    return null;
  }
  
  const diffInMs = dueDate.getTime() - now.getTime();
  const diffInDays = Math.ceil(diffInMs / (1000 * 60 * 60 * 24));
  const diffInHours = Math.ceil(diffInMs / (1000 * 60 * 60));
  const diffInMinutes = Math.ceil(diffInMs / (1000 * 60));
  
  let status = '';
  let timeText = '';
  let icon = 'üìÖ';
  let urgencyClass = '';
  
  if (diffInMs < 0 && Math.abs(diffInDays) > 0) {
    // Vencida (solo si ha pasado al menos un d√≠a completo)
    const overdueDays = Math.abs(diffInDays);
    status = 'overdue';
    icon = '‚ö†Ô∏è';
    urgencyClass = 'overdue';
    timeText = `Vencida hace ${overdueDays} ${overdueDays === 1 ? 'd√≠a' : 'd√≠as'}`;
  } else if (diffInDays === 0 || (diffInMs < 0 && Math.abs(diffInDays) === 0)) {
    // Hoy (incluye casos donde es el mismo d√≠a aunque haya pasado la hora)
    status = 'today';
    icon = 'üî•';
    urgencyClass = 'today';
    timeText = 'Vence hoy';
  } else if (diffInDays === 1) {
    // Ma√±ana
    status = 'tomorrow';
    icon = '‚è∞';
    urgencyClass = 'tomorrow';
    timeText = 'Vence ma√±ana';
  } else if (diffInDays <= 7) {
    // Esta semana
    status = 'this-week';
    icon = 'üìÖ';
    urgencyClass = 'this-week';
    timeText = `Vence en ${diffInDays} d√≠as`;
  } else {
    // Futuro lejano
    status = 'future';
    icon = 'üóìÔ∏è';
    urgencyClass = 'future';
    timeText = `Vence en ${diffInDays} d√≠as`;
  }
  
  return {
    status,
    icon,
    timeText,
    urgencyClass,
    formattedDate: dueDate.toLocaleDateString('es-ES', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    })
  };
};

const dueDateInfo = dueDate ? getDueDateInfo(dueDate) : null;
---

{dueDateInfo && (
  <div class={`due-date-container ${dueDateInfo.urgencyClass} ${compact ? 'compact' : ''}`}>
    <div class="due-date-main">
      <span class="due-date-icon" title={`Estado: ${dueDateInfo.status}`}>
        {dueDateInfo.icon}
      </span>
      <div class="due-date-text">
        <span class="due-date-label">Fecha l√≠mite:</span>
        <span class="due-date-value" title={dueDateInfo.formattedDate}>
          {dueDateInfo.formattedDate}
        </span>
      </div>
    </div>
    {showTimeRemaining && (
      <div class={`time-remaining ${dueDateInfo.urgencyClass}`}>
        <span class="time-remaining-text">
          {dueDateInfo.timeText}
        </span>
      </div>
    )}
  </div>
)}

<style>
  .due-date-container {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
    padding: 0.5rem;
    border-radius: 6px;
    font-size: 0.875rem;
    background: var(--muted, #f8fafc);
    border: 1px solid var(--border, #e2e8f0);
    margin-top: 0.5rem;
  }

  .due-date-container.compact {
    padding: 0.25rem 0.5rem;
    font-size: 0.75rem;
    gap: 0.125rem;
  }

  .due-date-main {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .due-date-icon {
    font-size: 1rem;
    line-height: 1;
  }

  .due-date-text {
    display: flex;
    flex-direction: column;
    gap: 0.125rem;
  }

  .due-date-label {
    font-size: 0.75rem;
    color: var(--muted-foreground, #64748b);
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.025em;
  }

  .due-date-value {
    font-weight: 600;
    color: var(--foreground, #1e293b);
  }

  .time-remaining {
    display: flex;
    align-items: center;
    padding-left: 1.5rem;
  }

  .time-remaining-text {
    font-size: 0.75rem;
    font-weight: 500;
  }

  /* Estados de urgencia */
  .due-date-container.overdue {
    background: rgba(239, 68, 68, 0.05);
    border-color: rgba(239, 68, 68, 0.2);
  }

  .due-date-container.overdue .time-remaining-text {
    color: #dc2626;
    font-weight: 700;
  }

  .due-date-container.critical {
    background: rgba(239, 68, 68, 0.1);
    border-color: rgba(239, 68, 68, 0.3);
    animation: pulse-urgent 2s infinite;
  }

  .due-date-container.critical .time-remaining-text {
    color: #dc2626;
    font-weight: 700;
  }

  .due-date-container.today {
    background: rgba(245, 158, 11, 0.05);
    border-color: rgba(245, 158, 11, 0.2);
  }

  .due-date-container.today .time-remaining-text {
    color: #d97706;
    font-weight: 600;
  }

  .due-date-container.tomorrow {
    background: rgba(34, 197, 94, 0.05);
    border-color: rgba(34, 197, 94, 0.2);
  }

  .due-date-container.tomorrow .time-remaining-text {
    color: #16a34a;
    font-weight: 600;
  }

  .due-date-container.this-week {
    background: rgba(59, 130, 246, 0.05);
    border-color: rgba(59, 130, 246, 0.2);
  }

  .due-date-container.this-week .time-remaining-text {
    color: #2563eb;
  }

  .due-date-container.future {
    background: var(--muted, #f8fafc);
    border-color: var(--border, #e2e8f0);
  }

  .due-date-container.future .time-remaining-text {
    color: var(--muted-foreground, #64748b);
  }

  /* Animaci√≥n para tareas cr√≠ticas */
  @keyframes pulse-urgent {
    0%, 100% {
      box-shadow: 0 0 0 0 rgba(239, 68, 68, 0.4);
    }
    50% {
      box-shadow: 0 0 0 4px rgba(239, 68, 68, 0.1);
    }
  }

  /* Responsive */
  @media (max-width: 640px) {
    .due-date-container {
      font-size: 0.75rem;
    }
    
    .due-date-main {
      gap: 0.375rem;
    }
    
    .time-remaining {
      padding-left: 1.25rem;
    }
  }
</style>
