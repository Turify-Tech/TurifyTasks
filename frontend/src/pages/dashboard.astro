---
// dashboard.astro - Dashboard integrado con componentes de tareas
import type { Task, User } from '../types';
import TaskList from '../components/TaskList.astro';
import TaskForm from '../components/TaskForm.astro';

// Los tipos globales est√°n definidos en types.ts
// No necesitamos redeclararlos aqu√≠

// Datos de ejemplo (en producci√≥n vendr√≠an de la API)
const exampleTasks = [
  {
    id: 1,
    title: "Revisar propuesta de cliente",
    description: "Analizar los requerimientos del nuevo proyecto web y preparar una respuesta detallada.",
    due_date: "2025-09-02",
    priority: "alta" as const,
    completed: false,
    list_name: "Trabajo",
    created_at: "2025-08-29T10:00:00Z",
    updated_at: "2025-08-29T10:00:00Z"
  },
  {
    id: 2,
    title: "Reuni√≥n de equipo",
    description: "Planificaci√≥n del sprint semanal con el equipo de desarrollo.",
    due_date: "2025-09-01",
    priority: "media" as const,
    completed: false,
    list_name: "Reuniones",
    created_at: "2025-08-28T15:30:00Z",
    updated_at: "2025-08-28T15:30:00Z"
  },
  {
    id: 3,
    title: "Actualizar documentaci√≥n",
    description: "Documentar las nuevas funcionalidades implementadas en el proyecto.",
    due_date: "2025-09-03",
    priority: "baja" as const,
    completed: true,
    list_name: "Documentaci√≥n",
    created_at: "2025-08-27T09:15:00Z",
    updated_at: "2025-08-30T14:20:00Z"
  }
];

// Categorizar tareas para diferentes vistas
const allTasks = exampleTasks;
const todayTasks = allTasks.filter(task => {
  const today = new Date().toISOString().split('T')[0];
  return task.due_date === today;
});
const upcomingTasks = allTasks.filter(task => {
  const today = new Date();
  const taskDate = new Date(task.due_date || '');
  return taskDate > today && !task.completed;
});
const completedTasks = allTasks.filter(task => task.completed);
const pendingTasks = allTasks.filter(task => !task.completed);

// Estad√≠sticas
const stats = {
  total: allTasks.length,
  pending: pendingTasks.length,
  completed: completedTasks.length,
  highPriority: allTasks.filter(task => task.priority === 'alta' && !task.completed).length
};
---

<html lang="es">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Dashboard - TurifyTasks</title>
		<link rel="stylesheet" href="../styles/dashboard.css" />
	</head>
	<body>
		<!-- Header mejorado -->
		<header class="header">
			<div class="header-content">
				<div class="logo">
					<div class="logo-icon">‚úì</div>
					<span>TurifyTasks</span>
				</div>
				<div class="user-menu">
					<div class="user-info">
						<div class="user-avatar" id="userAvatar">U</div>
						<span id="userEmail">Cargando...</span>
					</div>
					<button class="logout-btn" onclick="logout()">
						Cerrar sesi√≥n
					</button>
				</div>
			</div>
		</header>

		<main class="main-content">
			<!-- Toolbar superior -->
			<div class="dashboard-toolbar">
				<div class="toolbar-left">
					<h1>Dashboard</h1>
					<p class="toolbar-subtitle">Gestiona tus tareas de manera eficiente</p>
				</div>
				<div class="toolbar-actions">
					<button class="action-btn secondary" onclick="refreshTasks()">
						üîÑ Actualizar
					</button>
					<button class="action-btn primary" onclick="showCreateTaskModal()">
						‚ûï Nueva Tarea
					</button>
				</div>
			</div>

			<!-- Estad√≠sticas r√°pidas -->
			<div class="stats-grid">
				<div class="stat-card">
					<div class="stat-number pending">{stats.pending}</div>
					<div class="stat-label">Pendientes</div>
				</div>
				<div class="stat-card">
					<div class="stat-number completed">{stats.completed}</div>
					<div class="stat-label">Completadas</div>
				</div>
				<div class="stat-card">
					<div class="stat-number high-priority">{stats.highPriority}</div>
					<div class="stat-label">Alta Prioridad</div>
				</div>
				<div class="stat-card">
					<div class="stat-number total">{stats.total}</div>
					<div class="stat-label">Total</div>
				</div>
			</div>

			<!-- Filtros y b√∫squeda -->
			<div class="dashboard-filters">
				<div class="filters-row">
					<input 
						type="text" 
						class="search-input" 
						placeholder="üîç Buscar tareas..."
						id="searchInput"
						oninput="handleSearch(this.value)"
					/>
					<select class="filter-select" id="priorityFilter" onchange="handleFilter()">
						<option value="">Todas las prioridades</option>
						<option value="alta">üî¥ Alta</option>
						<option value="media">üü° Media</option>
						<option value="baja">üü¢ Baja</option>
					</select>
					<select class="filter-select" id="statusFilter" onchange="handleFilter()">
						<option value="">Todos los estados</option>
						<option value="pending">‚è≥ Pendientes</option>
						<option value="completed">‚úÖ Completadas</option>
					</select>
				</div>
			</div>

			<!-- Layout principal -->
			<div class="dashboard-layout">
				<div class="dashboard-main">
					<!-- Bandeja de entrada -->
					<TaskList 
						tasks={pendingTasks} 
						title="üì• Bandeja de entrada"
						emptyMessage="¬°Excelente! No tienes tareas pendientes"
					/>

					<!-- Tareas de hoy -->
					<TaskList 
						tasks={todayTasks} 
						title="üìÖ Tareas de hoy"
						emptyMessage="No hay tareas programadas para hoy"
						maxItems={5}
					/>
				</div>

				<div class="dashboard-sidebar">
					<!-- Pr√≥ximas tareas -->
					<div class="sidebar-card">
						<div class="sidebar-header">üîÆ Pr√≥ximas</div>
						<div class="sidebar-content">
							<TaskList 
								tasks={upcomingTasks} 
								title=""
								emptyMessage="No hay tareas pr√≥ximas"
								maxItems={3}
							/>
						</div>
					</div>

					<!-- Completadas recientes -->
					<div class="sidebar-card" style="margin-top: 20px;">
						<div class="sidebar-header">‚úÖ Completadas</div>
						<div class="sidebar-content">
							<TaskList 
								tasks={completedTasks} 
								title=""
								emptyMessage="No hay tareas completadas"
								maxItems={5}
							/>
						</div>
					</div>
				</div>
			</div>
		</main>

		<!-- Formulario de tarea (modal) -->
		<TaskForm />

		<!-- Contenedor para notificaciones toast -->
		<div class="toast-container" id="toastContainer"></div>

		<script>
			// Tipos locales
			type Task = {
				id: number;
				title: string;
				description?: string;
				priority: 'baja' | 'media' | 'alta';
				completed: boolean;
				due_date?: string;
				list_name?: string;
				created_at: string;
				updated_at: string;
			};

			type User = {
				id: number;
				email: string;
				name?: string;
			};

			// Estado global de la aplicaci√≥n
			// Variables globales
			let allTasks: Task[] = [];
			let filteredTasks: Task[] = [];
			let currentUser = null;

			// Verificar autenticaci√≥n al cargar la p√°gina
			document.addEventListener('DOMContentLoaded', function() {
				checkAuthentication();
				loadTasks();
			});

			// Funci√≥n de autenticaci√≥n
			async function checkAuthentication() {
				try {
					const response = await fetch('http://localhost:3000/api/auth/profile', {
						method: 'GET',
						credentials: 'include',
						headers: {
							'Authorization': `Bearer ${localStorage.getItem('authToken') || ''}`,
							'Content-Type': 'application/json'
						}
					});

					if (response.ok) {
						const data = await response.json();
						currentUser = data.user;
						updateUserUI(currentUser);
					} else {
						window.location.href = '/login';
					}
				} catch (error) {
					console.error('Error verificando autenticaci√≥n:', error);
					window.location.href = '/login';
				}
			}

			// Actualizar UI del usuario
			function updateUserUI(user: User): void {
				const userEmail = document.getElementById('userEmail');
				const userAvatar = document.getElementById('userAvatar');
				
				if (userEmail) {
					userEmail.textContent = user?.email || 'Usuario';
				}
				if (userAvatar && user?.email) {
					userAvatar.textContent = user.email.charAt(0).toUpperCase();
				}
			}

			// Funci√≥n para cargar tareas desde la API
			async function loadTasks() {
				try {
					showLoading(true);
					
					const response = await fetch('http://localhost:3000/api/tasks', {
						method: 'GET',
						credentials: 'include',
						headers: {
							'Authorization': `Bearer ${localStorage.getItem('authToken') || ''}`,
							'Content-Type': 'application/json'
						}
					});

					if (response.ok) {
						const data = await response.json();
						allTasks = data.data || [];
						filteredTasks = [...allTasks];
						updateTaskLists();
						updateStats();
					} else {
						console.error('Error al cargar tareas');
						showToast('Error al cargar las tareas', 'error');
					}
				} catch (error) {
					console.error('Error cargando tareas:', error);
					showToast('Error de conexi√≥n al cargar tareas', 'error');
				} finally {
					showLoading(false);
				}
			}

			// Funciones para manejar eventos de tareas (requeridas por los componentes)
			window.handleToggleComplete = async function(taskId, completed) {
				try {
					const response = await fetch(`http://localhost:3000/api/tasks/${taskId}`, {
						method: 'PUT',
						credentials: 'include',
						headers: {
							'Authorization': `Bearer ${localStorage.getItem('authToken') || ''}`,
							'Content-Type': 'application/json'
						},
						body: JSON.stringify({ completed })
					});

					if (response.ok) {
						showToast(
							completed ? 'Tarea marcada como completada' : 'Tarea marcada como pendiente',
							'success'
						);
						loadTasks(); // Recargar tareas
					} else {
						throw new Error('Error al actualizar tarea');
					}
				} catch (error) {
					console.error('Error:', error);
					showToast('Error al actualizar la tarea', 'error');
					// Revertir checkbox
					const checkbox = document.querySelector(`[onchange*="${taskId}"]`);
					if (checkbox) (checkbox as HTMLInputElement).checked = !completed;
				}
			};

			window.handleEdit = function(taskId: number): void {
				const task = allTasks.find(t => t.id === taskId);
				if (task) {
					showTaskForm('edit', task);
				}
			};

			window.handleDelete = async function(taskId) {
				if (!confirm('¬øEst√°s seguro de que quieres eliminar esta tarea?')) {
					return;
				}

				try {
					const response = await fetch(`http://localhost:3000/api/tasks/${taskId}`, {
						method: 'DELETE',
						credentials: 'include',
						headers: {
							'Authorization': `Bearer ${localStorage.getItem('authToken') || ''}`,
							'Content-Type': 'application/json'
						}
					});

					if (response.ok) {
						showToast('Tarea eliminada correctamente', 'success');
						loadTasks();
					} else {
						throw new Error('Error al eliminar tarea');
					}
				} catch (error) {
					console.error('Error:', error);
					showToast('Error al eliminar la tarea', 'error');
				}
			};

			// Funci√≥n para enviar formulario (requerida por TaskForm)
			window.submitTask = async function(taskData: any): Promise<void> {
				const isEdit = (taskData as any).id;
				const url = isEdit 
					? `http://localhost:3000/api/tasks/${(taskData as any).id}` 
					: 'http://localhost:3000/api/tasks';
				const method = isEdit ? 'PUT' : 'POST';

				try {
					const response = await fetch(url, {
						method,
						credentials: 'include',
						headers: {
							'Authorization': `Bearer ${localStorage.getItem('authToken') || ''}`,
							'Content-Type': 'application/json'
						},
						body: JSON.stringify(taskData)
					});

					if (response.ok) {
						showToast(
							isEdit ? 'Tarea actualizada correctamente' : 'Tarea creada correctamente',
							'success'
						);
						loadTasks();
					} else {
						const errorData = await response.json();
						throw new Error(errorData.message || 'Error al guardar tarea');
					}
				} catch (error) {
					console.error('Error:', error);
					throw error; // Re-lanzar para que TaskForm lo maneje
				}
			};

			// Funciones de interfaz
			window.showCreateTaskModal = function() {
				showTaskForm('create');
			};

			function showTaskForm(mode: 'create' | 'edit' = 'create', taskData: Task | null = null): void {
				if (typeof window.showTaskForm === 'function') {
					window.showTaskForm(mode, taskData);
				}
			}

			// Funci√≥n de b√∫squeda
			window.handleSearch = function(searchTerm: string): void {
				filteredTasks = allTasks.filter(task =>
					task.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
					(task.description && task.description.toLowerCase().includes(searchTerm.toLowerCase()))
				);
				updateTaskLists();
			};			// Funci√≥n de filtrado
			window.handleFilter = function(): void {
				const priorityFilterEl = document.getElementById('priorityFilter') as HTMLSelectElement;
				const statusFilterEl = document.getElementById('statusFilter') as HTMLSelectElement;
				const priorityFilter = priorityFilterEl ? priorityFilterEl.value : '';
				const statusFilter = statusFilterEl ? statusFilterEl.value : '';
				
				filteredTasks = allTasks.filter(task => {
					let matches = true;
					
					if (priorityFilter && task.priority !== priorityFilter) {
						matches = false;
					}
					
					if (statusFilter) {
						if (statusFilter === 'pending' && task.completed) {
							matches = false;
						}
						if (statusFilter === 'completed' && !task.completed) {
							matches = false;
						}
					}
					
					return matches;
				});
				
				updateTaskLists();
			};

			// Funci√≥n para refrescar tareas
			window.refreshTasks = function() {
				loadTasks();
				showToast('Tareas actualizadas', 'success');
			};

			// Funci√≥n de logout
			async function logout() {
				try {
					await fetch('http://localhost:3000/api/auth/logout', {
						method: 'POST',
						credentials: 'include',
						headers: {
							'Authorization': `Bearer ${localStorage.getItem('authToken') || ''}`,
							'Content-Type': 'application/json'
						}
					});
				} catch (error) {
					console.error('Error al cerrar sesi√≥n:', error);
				} finally {
					localStorage.removeItem('authToken');
					window.location.href = '/login';
				}
			}

			// Funciones de utilidad
			function updateTaskLists() {
				// Esta funci√≥n ser√≠a m√°s compleja en una app real
				// Por ahora, los datos se muestran desde el servidor
				console.log('Actualizando listas de tareas:', filteredTasks.length, 'tareas');
			}

			function updateStats() {
				const pending = allTasks.filter(t => !t.completed).length;
				const completed = allTasks.filter(t => t.completed).length;
				const highPriority = allTasks.filter(t => t.priority === 'alta' && !t.completed).length;
				
				// Actualizar elementos estad√≠sticos
				const statElements = {
					pending: document.querySelector('.stat-number.pending'),
					completed: document.querySelector('.stat-number.completed'),
					highPriority: document.querySelector('.stat-number.high-priority'),
					total: document.querySelector('.stat-number.total')
				};

				if (statElements.pending) statElements.pending.textContent = pending.toString();
				if (statElements.completed) statElements.completed.textContent = completed.toString();
				if (statElements.highPriority) statElements.highPriority.textContent = highPriority.toString();
				if (statElements.total) statElements.total.textContent = allTasks.length.toString();
			}

			function showLoading(show: boolean): void {
				const loadingElements = document.querySelectorAll('.loading-state');
				const contentElements = document.querySelectorAll('.task-list-content');
				
				loadingElements.forEach(el => {
					(el as HTMLElement).style.display = show ? 'block' : 'none';
				});
				contentElements.forEach(el => {
					(el as HTMLElement).style.display = show ? 'none' : 'block';
				});
			}

			// Sistema de notificaciones toast
			function showToast(message: string, type: 'success' | 'error' | 'info' = 'info', duration: number = 3000): void {
				const container = document.getElementById('toastContainer');
				if (!container) return;

				const toast = document.createElement('div');
				toast.className = `toast ${type}`;
				toast.innerHTML = `
					<div style="display: flex; justify-content: space-between; align-items: center;">
						<span>${message}</span>
						<button onclick="this.parentElement.parentElement.remove()" style="background: none; border: none; font-size: 18px; cursor: pointer; margin-left: 12px;">√ó</button>
					</div>
				`;

				container.appendChild(toast);

				// Auto-remove despu√©s del duration
				setTimeout(() => {
					if (toast.parentElement) {
						toast.remove();
					}
				}, duration);
			}

			// Hacer funciones globales accesibles
			window.logout = logout;
			window.showToast = showToast;
		</script>
	</body>
</html>
