---
// dashboard.astro - Dashboard híbrido que combina funcionalidad backend + componentes avanzados
import type { Task, User } from "../types";
import TaskList from "../components/TaskList.astro";
import TaskForm from "../components/TaskForm.astro";
import ConfirmModal from "../components/ConfirmModal.astro";
---

<html lang="es">
    <head>
        <meta charset="utf-8" />
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <meta name="viewport" content="width=device-width" />
        <meta name="generator" content={Astro.generator} />
        <title>Dashboard - TurifyTasks</title>
        <style>
            :root {
                --background: hsl(0, 0%, 98%);
                --foreground: hsl(152, 12%, 15%);
                --card: hsl(0, 0%, 100%);
                --card-foreground: hsl(152, 12%, 15%);
                --primary: hsl(151, 77%, 20%);
                --primary-foreground: hsl(0, 0%, 98%);
                --secondary: hsl(151, 30%, 95%);
                --secondary-foreground: hsl(152, 12%, 15%);
                --muted: hsl(151, 30%, 96%);
                --muted-foreground: hsl(152, 10%, 45%);
                --accent: hsl(151, 50%, 90%);
                --accent-foreground: hsl(152, 12%, 15%);
                --border: hsl(151, 25%, 88%);
                --input: hsl(151, 25%, 94%);
                --ring: hsl(151, 77%, 20%);
                --success: hsl(151, 77%, 30%);
                --priority-low: hsl(151, 50%, 85%);
                --priority-medium: hsl(151, 77%, 35%);
                --priority-high: hsl(151, 85%, 25%);
            }

            * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
            }

            body {
                font-family: -apple-system, BlinkMacSystemFont, "Segoe UI",
                    Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
                background: var(--background);
                color: var(--foreground);
                min-height: 100vh;
            }

            /* Header Styles */
            .header {
                background: var(--card);
                border-bottom: 1px solid var(--border);
                position: sticky;
                top: 0;
                z-index: 50;
            }

            .header-content {
                max-width: 1200px;
                margin: 0 auto;
                padding: 1rem;
                display: flex;
                justify-content: space-between;
                align-items: center;
            }

            .logo {
                display: flex;
                align-items: center;
                gap: 0.5rem;
                font-size: 1.25rem;
                font-weight: bold;
                color: var(--primary);
            }

            .logo-icon {
                width: 32px;
                height: 32px;
                background: var(--primary);
                color: white;
                border-radius: 8px;
                display: flex;
                align-items: center;
                justify-content: center;
            }

            .user-section {
                display: flex;
                align-items: center;
                gap: 1rem;
            }

            .user-info {
                display: flex;
                align-items: center;
                gap: 0.5rem;
            }

            .user-avatar {
                width: 32px;
                height: 32px;
                background: var(--primary);
                color: white;
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                font-weight: bold;
            }

            .logout-btn {
                background: var(--secondary);
                color: var(--secondary-foreground);
                border: 1px solid var(--border);
                padding: 0.5rem 1rem;
                border-radius: 6px;
                cursor: pointer;
                font-size: 0.875rem;
                transition: all 0.2s;
            }

            .logout-btn:hover {
                background: var(--accent);
            }

            /* Layout principal */
            .dashboard-layout {
                display: grid;
                grid-template-columns: 280px 1fr;
                min-height: calc(100vh - 73px);
            }

            /* Sidebar */
            .sidebar {
                background: var(--card);
                border-right: 1px solid var(--border);
                padding: 1.5rem;
            }

            .sidebar-header {
                margin-bottom: 2rem;
            }

            .sidebar-title {
                font-size: 1.1rem;
                font-weight: 600;
                color: var(--foreground);
                margin-bottom: 0.5rem;
            }

            .sidebar-subtitle {
                font-size: 0.875rem;
                color: var(--muted-foreground);
            }

            .sidebar-nav {
                list-style: none;
            }

            .sidebar-item {
                display: block;
                padding: 0.75rem 1rem;
                border-radius: 6px;
                text-decoration: none;
                color: var(--muted-foreground);
                margin-bottom: 0.25rem;
                cursor: pointer;
                transition: all 0.2s;
                border: none;
                background: none;
                width: 100%;
                text-align: left;
            }

            .sidebar-item:hover {
                background: var(--accent);
                color: var(--accent-foreground);
            }

            .sidebar-item.active {
                background: var(--primary);
                color: var(--primary-foreground);
            }

            .sidebar-item-content {
                display: flex;
                justify-content: space-between;
                align-items: center;
            }

            .sidebar-item-count {
                background: rgba(255, 255, 255, 0.2);
                color: inherit;
                padding: 0.125rem 0.375rem;
                border-radius: 12px;
                font-size: 0.75rem;
                font-weight: 500;
            }

            /* Main content */
            .main-content {
                padding: 2rem;
                overflow-y: auto;
            }

            .main-header {
                margin-bottom: 2rem;
            }

            .page-title {
                font-size: 2rem;
                font-weight: bold;
                color: var(--foreground);
                margin-bottom: 0.5rem;
            }

            .page-subtitle {
                color: var(--muted-foreground);
                font-size: 1rem;
            }

            /* Search y filtros */
            .search-section {
                background: var(--card);
                border: 1px solid var(--border);
                border-radius: 8px;
                padding: 1.5rem;
                margin-bottom: 2rem;
            }

            .search-row {
                display: flex;
                gap: 1rem;
                flex-wrap: wrap;
            }

            .search-input,
            .filter-select {
                flex: 1;
                min-width: 200px;
                padding: 0.75rem;
                border: 1px solid var(--border);
                border-radius: 6px;
                background: var(--background);
                color: var(--foreground);
                font-size: 0.875rem;
            }

            .search-input:focus,
            .filter-select:focus {
                outline: none;
                border-color: var(--ring);
                box-shadow: 0 0 0 2px rgba(34, 197, 94, 0.2);
            }

            /* Botones de acción */
            .actions-section {
                display: flex;
                gap: 1rem;
                margin-bottom: 2rem;
            }

            .action-btn {
                padding: 0.75rem 1.5rem;
                border-radius: 6px;
                font-weight: 500;
                cursor: pointer;
                font-size: 0.875rem;
                border: none;
                transition: all 0.2s;
                display: flex;
                align-items: center;
                gap: 0.5rem;
            }

            .action-btn.primary {
                background: var(--primary);
                color: var(--primary-foreground);
            }

            .action-btn.primary:hover {
                background: hsl(151, 77%, 18%);
            }

            .action-btn.secondary {
                background: var(--secondary);
                color: var(--secondary-foreground);
                border: 1px solid var(--border);
            }

            .action-btn.secondary:hover {
                background: var(--accent);
            }

            /* Tasks section */
            .tasks-section {
                background: var(--card);
                border: 1px solid var(--border);
                border-radius: 8px;
                min-height: 400px;
            }

            .tasks-header {
                padding: 1.5rem;
                border-bottom: 1px solid var(--border);
                display: flex;
                justify-content: space-between;
                align-items: center;
            }

            .tasks-title {
                font-size: 1.25rem;
                font-weight: 600;
                color: var(--foreground);
            }

            .tasks-counter {
                background: var(--muted);
                color: var(--muted-foreground);
                padding: 0.25rem 0.75rem;
                border-radius: 12px;
                font-size: 0.875rem;
                font-weight: 500;
            }

            .tasks-content {
                padding: 1.5rem;
            }

            .empty-state {
                text-align: center;
                color: var(--muted-foreground);
                padding: 4rem 1rem;
            }

            .empty-state-icon {
                font-size: 3rem;
                margin-bottom: 1rem;
            }

            /* Loading state */
            .loading-state {
                display: none;
                text-align: center;
                padding: 2rem;
                color: var(--muted-foreground);
            }

            /* Toast notifications */
            .toast-container {
                position: fixed;
                top: 1rem;
                right: 1rem;
                z-index: 1000;
            }

            .toast {
                background: var(--card);
                border: 1px solid var(--border);
                border-radius: 8px;
                padding: 1rem;
                margin-bottom: 0.5rem;
                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
                min-width: 300px;
                animation: slideIn 0.3s ease-out;
            }

            .toast.success {
                border-left: 4px solid var(--success);
            }

            .toast.error {
                border-left: 4px solid hsl(0, 85%, 60%);
            }

            @keyframes slideIn {
                from {
                    transform: translateX(100%);
                    opacity: 0;
                }
                to {
                    transform: translateX(0);
                    opacity: 1;
                }
            }

            /* Responsive */
            @media (max-width: 768px) {
                .dashboard-layout {
                    grid-template-columns: 1fr;
                }

                .sidebar {
                    display: none;
                }

                .search-row {
                    flex-direction: column;
                }

                .search-input,
                .filter-select {
                    min-width: auto;
                }
            }
        </style>
    </head>
    <body>
        <!-- Header -->
        <header class="header">
            <div class="header-content">
                <div class="logo">
                    <div class="logo-icon">✓</div>
                    <span>TurifyTasks</span>
                </div>
                <div class="user-section">
                    <div class="user-info">
                        <div class="user-avatar" id="userAvatar">U</div>
                        <span id="userEmail">Cargando...</span>
                    </div>
                    <button class="logout-btn" onclick="logout()"
                        >Cerrar sesión</button
                    >
                </div>
            </div>
        </header>

        <div class="dashboard-layout">
            <!-- Sidebar -->
            <aside class="sidebar">
                <div class="sidebar-header">
                    <div class="sidebar-title">Filtros</div>
                    <div class="sidebar-subtitle">Organiza tus tareas</div>
                </div>

                <nav class="sidebar-nav">
                    <button
                        class="sidebar-item active"
                        onclick="filterTasks('inbox')">
                        <div class="sidebar-item-content">
                            <span>📥 Bandeja de entrada</span>
                            <span class="sidebar-item-count" id="inboxCount"
                                >0</span
                            >
                        </div>
                    </button>
                    <button class="sidebar-item" onclick="filterTasks('today')">
                        <div class="sidebar-item-content">
                            <span>📅 Hoy</span>
                            <span class="sidebar-item-count" id="todayCount"
                                >0</span
                            >
                        </div>
                    </button>
                    <button
                        class="sidebar-item"
                        onclick="filterTasks('upcoming')">
                        <div class="sidebar-item-content">
                            <span>📋 Próximas</span>
                            <span class="sidebar-item-count" id="upcomingCount"
                                >0</span
                            >
                        </div>
                    </button>
                    <button
                        class="sidebar-item"
                        onclick="filterTasks('important')">
                        <div class="sidebar-item-content">
                            <span>⭐ Importantes</span>
                            <span class="sidebar-item-count" id="importantCount"
                                >0</span
                            >
                        </div>
                    </button>
                    <button
                        class="sidebar-item"
                        onclick="filterTasks('completed')">
                        <div class="sidebar-item-content">
                            <span>✅ Completadas</span>
                            <span class="sidebar-item-count" id="completedCount"
                                >0</span
                            >
                        </div>
                    </button>
                </nav>
            </aside>

            <!-- Main content -->
            <main class="main-content">
                <div class="main-header">
                    <h1 class="page-title" id="pageTitle">
                        Bandeja de entrada
                    </h1>
                    <p class="page-subtitle">
                        Gestiona tus tareas de manera eficiente y organizada
                    </p>
                </div>

                <!-- Búsqueda y filtros -->
                <div class="search-section">
                    <div class="search-row">
                        <input
                            type="text"
                            class="search-input"
                            placeholder="🔍 Buscar tareas..."
                            id="searchInput"
                            onkeyup="handleSearch(this.value)"
                        />
                        <select
                            class="filter-select"
                            id="priorityFilter"
                            onchange="handlePriorityFilter()">
                            <option value="">Todas las prioridades</option>
                            <option value="high">🔴 Alta prioridad</option>
                            <option value="medium">🟡 Prioridad media</option>
                            <option value="low">🟢 Baja prioridad</option>
                        </select>
                    </div>
                </div>

                <!-- Acciones -->
                <div class="actions-section">
                    <button
                        class="action-btn primary"
                        onclick="window.showTaskForm && window.showTaskForm('create')">
                        ➕ Nueva Tarea
                    </button>
                    <button
                        class="action-btn secondary"
                        onclick="refreshTasks()">
                        🔄 Actualizar
                    </button>
                </div>

                <!-- Sección de tareas -->
                <div class="tasks-section">
                    <div class="tasks-header">
                        <h2 class="tasks-title" id="sectionTitle">
                            Bandeja de entrada
                        </h2>
                        <span class="tasks-counter" id="taskCounter">0/0</span>
                    </div>
                    <div class="tasks-content">
                        <div class="loading-state" id="loadingState">
                            ⏳ Cargando tareas...
                        </div>
                        <div id="tasksContainer">
                            <!-- Las tareas se renderizan aquí -->
                        </div>
                    </div>
                </div>
            </main>
        </div>

        <!-- Modal de formulario (usa tu componente avanzado) -->
        <TaskForm />

        <!-- Contenedor de notificaciones -->
        <div class="toast-container" id="toastContainer"></div>

        <script>
            // Tipos locales (híbrido: funcionalidad de compañera + tus tipos)
            type Task = {
                id?: number;
                _id?: string;
                title: string;
                description?: string;
                priority: "high" | "medium" | "low" | "alta" | "media" | "baja";
                completed: boolean;
                due_date?: string;
                dueDate?: string;
                createdAt?: string;
                created_at?: string;
                updated_at?: string;
            };

            type User = {
                id: number;
                email: string;
                name?: string;
            };

            // Variables globales (de tu compañera)
            let allTasks: Task[] = [];
            let currentFilter = "inbox";

            // Helper para manejar fechas de manera segura
            function getTaskDate(task: Task): Date {
                const dateStr =
                    task.dueDate ||
                    task.due_date ||
                    task.createdAt ||
                    task.created_at;
                return dateStr ? new Date(dateStr) : new Date();
            }

            // Helper para serializar objetos de manera segura en HTML
            function safeJsonStringify(obj: any): string {
                return JSON.stringify(obj)
                    .replace(/"/g, "&quot;")
                    .replace(/'/g, "&#39;");
            }

            // Inicialización
            document.addEventListener("DOMContentLoaded", function () {
                checkAuthentication();
                loadTasks();
            });

            // Funciones de autenticación (de tu compañera)
            async function checkAuthentication() {
                const token = localStorage.getItem("authToken");
                if (!token) {
                    window.location.href = "/login";
                    return;
                }

                try {
                    const response = await fetch(
                        "http://localhost:3000/api/auth/profile",
                        {
                            method: "GET",
                            headers: {
                                Authorization: `Bearer ${token}`,
                                "Content-Type": "application/json",
                            },
                        }
                    );

                    if (response.ok) {
                        const data = await response.json();
                        updateUserUI(data.user);
                    } else {
                        localStorage.removeItem("authToken");
                        window.location.href = "/login";
                    }
                } catch (error) {
                    console.error("Error verificando autenticación:", error);
                    window.location.href = "/login";
                }
            }

            function updateUserUI(user: User): void {
                const userEmail = document.getElementById("userEmail");
                const userAvatar = document.getElementById("userAvatar");

                if (userEmail) userEmail.textContent = user.email;
                if (userAvatar)
                    userAvatar.textContent = user.email.charAt(0).toUpperCase();
            }

            // Cargar tareas (de tu compañera + mejoras)
            async function loadTasks() {
                const loadingState = document.getElementById("loadingState");
                if (loadingState) loadingState.style.display = "block";

                const token = localStorage.getItem("authToken");
                if (!token) return;

                try {
                    const response = await fetch(
                        "http://localhost:3000/api/tasks",
                        {
                            headers: {
                                Authorization: `Bearer ${token}`,
                                "Content-Type": "application/json",
                            },
                        }
                    );

                    if (response.ok) {
                        const data = await response.json();
                        allTasks = data.data || [];
                        updateTaskCounts();
                        renderTasks();
                    } else {
                        showToast("Error al cargar tareas", "error");
                    }
                } catch (error) {
                    console.error("Error cargando tareas:", error);
                    showToast("Error de conexión", "error");
                } finally {
                    if (loadingState) loadingState.style.display = "none";
                }
            }

            // Funciones de filtrado (de tu compañera)
            function updateTaskCounts() {
                const today = new Date().toDateString();

                const counts = {
                    inbox: allTasks.filter((task) => !task.completed).length,
                    today: allTasks.filter((task) => {
                        const taskDate = getTaskDate(task).toDateString();
                        return taskDate === today && !task.completed;
                    }).length,
                    upcoming: allTasks.filter((task) => {
                        const taskDate = getTaskDate(task);
                        return taskDate > new Date() && !task.completed;
                    }).length,
                    important: allTasks.filter(
                        (task) =>
                            (task.priority === "high" ||
                                task.priority === "alta") &&
                            !task.completed
                    ).length,
                    completed: allTasks.filter((task) => task.completed).length,
                };

                // Actualizar contadores en sidebar
                const inboxCount = document.getElementById("inboxCount");
                const todayCount = document.getElementById("todayCount");
                const upcomingCount = document.getElementById("upcomingCount");
                const importantCount =
                    document.getElementById("importantCount");
                const completedCount =
                    document.getElementById("completedCount");

                if (inboxCount)
                    inboxCount.textContent = counts.inbox.toString();
                if (todayCount)
                    todayCount.textContent = counts.today.toString();
                if (upcomingCount)
                    upcomingCount.textContent = counts.upcoming.toString();
                if (importantCount)
                    importantCount.textContent = counts.important.toString();
                if (completedCount)
                    completedCount.textContent = counts.completed.toString();
            }

            function filterTasks(filterType: string) {
                currentFilter = filterType;

                // Actualizar sidebar activo
                document.querySelectorAll(".sidebar-item").forEach((item) => {
                    item.classList.remove("active");
                });

                const activeItem = document.querySelector(
                    `[onclick="filterTasks('${filterType}')"]`
                );
                if (activeItem) activeItem.classList.add("active");

                // Actualizar títulos
                const titles: { [key: string]: string } = {
                    inbox: "Bandeja de entrada",
                    today: "Tareas de hoy",
                    upcoming: "Próximas tareas",
                    important: "Tareas importantes",
                    completed: "Tareas completadas",
                };

                const pageTitle = document.getElementById("pageTitle");
                const sectionTitle = document.getElementById("sectionTitle");

                if (pageTitle) pageTitle.textContent = titles[filterType];
                if (sectionTitle) sectionTitle.textContent = titles[filterType];

                renderTasks();
            }

            function renderTasks() {
                const container = document.getElementById("tasksContainer");
                if (!container) return;

                const today = new Date().toDateString();
                let filteredTasks: Task[] = [];

                switch (currentFilter) {
                    case "inbox":
                        filteredTasks = allTasks.filter(
                            (task) => !task.completed
                        );
                        break;
                    case "today":
                        filteredTasks = allTasks.filter((task) => {
                            const taskDate = getTaskDate(task).toDateString();
                            return taskDate === today && !task.completed;
                        });
                        break;
                    case "upcoming":
                        filteredTasks = allTasks.filter((task) => {
                            const taskDate = getTaskDate(task);
                            return taskDate > new Date() && !task.completed;
                        });
                        break;
                    case "important":
                        filteredTasks = allTasks.filter(
                            (task) =>
                                (task.priority === "high" ||
                                    task.priority === "alta") &&
                                !task.completed
                        );
                        break;
                    case "completed":
                        filteredTasks = allTasks.filter(
                            (task) => task.completed
                        );
                        break;
                    default:
                        filteredTasks = allTasks;
                }

                // Actualizar contador
                const taskCounter = document.getElementById("taskCounter");
                const completedCount = filteredTasks.filter(
                    (task) => task.completed
                ).length;
                if (taskCounter) {
                    taskCounter.textContent = `${completedCount}/${filteredTasks.length}`;
                }

                if (filteredTasks.length === 0) {
                    container.innerHTML = `
						<div class="empty-state">
							<div class="empty-state-icon">📝</div>
							<p>No hay tareas en esta lista</p>
						</div>
					`;
                    return;
                }

                // Renderizar usando el estilo híbrido (funcionalidad de tu compañera + mejoras visuales)
                const tasksHtml = filteredTasks
                    .map((task) => {
                        const taskId = task._id || task.id;
                        const isCompleted = task.completed ? "completed" : "";
                        const checkIcon = task.completed ? "✓" : "";
                        const priorityText = getPriorityText(task.priority);
                        const priorityClass = getPriorityClass(task.priority);

                        return `
						<div class="task-card ${isCompleted}" style="display: flex; gap: 1rem; padding: 1rem; margin-bottom: 0.5rem; background: var(--background); border: 1px solid var(--border); border-radius: 8px;">
							<button class="task-checkbox" onclick="toggleTask('${taskId}')" style="width: 24px; height: 24px; border: 2px solid var(--border); border-radius: 50%; background: ${task.completed ? "var(--success)" : "transparent"}; color: white; cursor: pointer; display: flex; align-items: center; justify-content: center; font-size: 14px;">
								${checkIcon}
							</button>
							<div style="flex: 1;">
								<h3 style="margin: 0 0 0.25rem 0; font-size: 1rem; color: var(--foreground); ${task.completed ? "text-decoration: line-through; opacity: 0.6;" : ""}">${escapeHtml(task.title)}</h3>
								${task.description ? `<p style="margin: 0 0 0.5rem 0; font-size: 0.875rem; color: var(--muted-foreground); ${task.completed ? "opacity: 0.6;" : ""}">${escapeHtml(task.description)}</p>` : ""}
								<div style="display: flex; gap: 0.5rem; font-size: 0.75rem;">
									<span class="priority-badge ${priorityClass}" style="padding: 0.125rem 0.5rem; border-radius: 12px; font-weight: 500;">${priorityText}</span>
								</div>
							</div>
							<div style="display: flex; gap: 0.25rem;">
								<button onclick="window.showTaskForm && window.showTaskForm('edit', JSON.parse('${safeJsonStringify(task)}'))" style="background: none; border: none; padding: 0.5rem; border-radius: 4px; cursor: pointer; opacity: 0.7; hover:opacity: 1;">✏️</button>
								<button onclick="deleteTask('${taskId}')" class="delete-btn-direct" style="background: none; border: none; padding: 0.5rem; border-radius: 4px; cursor: pointer; opacity: 0.7;">🗑️</button>
							</div>
						</div>
					`;
                    })
                    .join("");

                container.innerHTML = tasksHtml;
            }

            // Utilidades
            function getPriorityText(priority: string): string {
                switch (priority) {
                    case "high":
                    case "alta":
                        return "🔴 Alta";
                    case "medium":
                    case "media":
                        return "🟡 Media";
                    default:
                        return "🟢 Baja";
                }
            }

            function getPriorityClass(priority: string): string {
                switch (priority) {
                    case "high":
                    case "alta":
                        return "priority-high";
                    case "medium":
                    case "media":
                        return "priority-medium";
                    default:
                        return "priority-low";
                }
            }

            function escapeHtml(text: string): string {
                const div = document.createElement("div");
                div.textContent = text;
                return div.innerHTML;
            }

            // Funciones de tarea (híbrido: funcionalidad de compañera + integración con tus componentes)
            async function toggleTask(taskId: string) {
                const task = allTasks.find((t) => (t._id || t.id) === taskId);
                if (!task) return;

                const newCompletedState = !task.completed;
                task.completed = newCompletedState;
                updateTaskCounts();
                renderTasks();

                const token = localStorage.getItem("authToken");
                if (token) {
                    try {
                        await fetch(
                            `http://localhost:3000/api/tasks/${taskId}`,
                            {
                                method: "PUT",
                                headers: {
                                    Authorization: `Bearer ${token}`,
                                    "Content-Type": "application/json",
                                },
                                body: JSON.stringify({
                                    completed: newCompletedState,
                                }),
                            }
                        );
                        showToast(
                            newCompletedState
                                ? "Tarea completada"
                                : "Tarea marcada como pendiente",
                            "success"
                        );
                    } catch (error) {
                        console.error("Error updating task:", error);
                        // Revertir cambio local si falla
                        task.completed = !newCompletedState;
                        updateTaskCounts();
                        renderTasks();
                        showToast("Error al actualizar tarea", "error");
                    }
                }
            }

            async function deleteTask(taskId: string) {
                console.log("deleteTask called with:", taskId);

                // Función para esperar a que ConfirmModal esté disponible
                const waitForModal = () => {
                    return new Promise((resolve) => {
                        const checkModal = () => {
                            if (
                                window.ConfirmModal &&
                                document.getElementById("deleteTaskModal")
                            ) {
                                console.log("Modal disponible!");
                                resolve(true);
                            } else {
                                console.log("Esperando modal...");
                                setTimeout(checkModal, 100);
                            }
                        };
                        checkModal();
                    });
                };

                // Esperar a que el modal esté disponible
                await waitForModal();

                // Usar el modal de confirmación
                return new Promise((resolve) => {
                    window.ConfirmModal.show(
                        "deleteTaskModal",
                        async () => {
                            await performDelete(taskId);
                            resolve(true);
                        },
                        () => {
                            resolve(false);
                        }
                    );
                });
            }

            async function performDelete(taskId: string) {
                const token = localStorage.getItem("authToken");
                if (!token) return;

                try {
                    const response = await fetch(
                        `http://localhost:3000/api/tasks/${taskId}`,
                        {
                            method: "DELETE",
                            headers: {
                                Authorization: `Bearer ${token}`,
                                "Content-Type": "application/json",
                            },
                        }
                    );

                    if (response.ok) {
                        allTasks = allTasks.filter(
                            (t) => (t._id || t.id) !== taskId
                        );
                        updateTaskCounts();
                        renderTasks();
                        showToast("Tarea eliminada", "success");
                    } else {
                        showToast("Error al eliminar tarea", "error");
                    }
                } catch (error) {
                    console.error("Error deleting task:", error);
                    showToast("Error de conexión", "error");
                }
            }

            // Función para búsqueda
            function handleSearch(searchTerm: string) {
                // Implementación simple - se puede mejorar
                renderTasks();
            }

            function handlePriorityFilter() {
                // Implementación simple - se puede mejorar
                renderTasks();
            }

            function refreshTasks() {
                loadTasks();
                showToast("Tareas actualizadas", "success");
            }

            // Integración con tus componentes avanzados
            window.submitTask = async function (taskData: any): Promise<void> {
                const token = localStorage.getItem("authToken");
                if (!token) throw new Error("No autorizado");

                const isEdit = taskData.id;
                const url = isEdit
                    ? `http://localhost:3000/api/tasks/${taskData.id}`
                    : "http://localhost:3000/api/tasks";
                const method = isEdit ? "PUT" : "POST";

                try {
                    const response = await fetch(url, {
                        method,
                        headers: {
                            Authorization: `Bearer ${token}`,
                            "Content-Type": "application/json",
                        },
                        body: JSON.stringify(taskData),
                    });

                    if (response.ok) {
                        await loadTasks(); // Recargar tareas
                        showToast(
                            isEdit ? "Tarea actualizada" : "Tarea creada",
                            "success"
                        );
                    } else {
                        const errorData = await response.json();
                        throw new Error(
                            errorData.message || "Error al guardar tarea"
                        );
                    }
                } catch (error) {
                    console.error("Error:", error);
                    throw error;
                }
            };

            // Logout
            async function logout() {
                const token = localStorage.getItem("authToken");
                if (token) {
                    try {
                        await fetch("http://localhost:3000/api/auth/logout", {
                            method: "POST",
                            headers: {
                                Authorization: `Bearer ${token}`,
                                "Content-Type": "application/json",
                            },
                        });
                    } catch (error) {
                        console.error("Error durante logout:", error);
                    }
                }

                localStorage.removeItem("authToken");
                window.location.href = "/login";
            }

            // Toast notifications
            function showToast(
                message: string,
                type: "success" | "error" | "info" = "info",
                duration: number = 3000
            ): void {
                const container = document.getElementById("toastContainer");
                if (!container) return;

                const toast = document.createElement("div");
                toast.className = `toast ${type}`;
                toast.innerHTML = `
					<div style="display: flex; justify-content: space-between; align-items: center;">
						<span>${message}</span>
						<button onclick="this.parentElement.parentElement.remove()" style="background: none; border: none; font-size: 18px; cursor: pointer; margin-left: 12px;">×</button>
					</div>
				`;

                container.appendChild(toast);

                setTimeout(() => {
                    if (toast.parentElement) {
                        toast.remove();
                    }
                }, duration);
            }

            // Hacer funciones disponibles globalmente
            Object.assign(window, {
                filterTasks,
                toggleTask,
                deleteTask,
                logout,
                showToast,
            });
        </script>

        <!-- Modal de confirmación para eliminar tareas -->
        <ConfirmModal
            id="deleteTaskModal"
            title="Eliminar tarea"
            message="¿Estás seguro de que quieres eliminar esta tarea? Esta acción no se puede deshacer."
            confirmText="Eliminar"
            cancelText="Cancelar"
        />
    </body>
</html>
