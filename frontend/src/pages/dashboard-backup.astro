<html lang="es">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Dashboard - TurifyTasks</title>
		<style>
			:root {
				--background: hsl(0, 0%, 98%);
				--foreground: hsl(152, 12%, 15%);
				--card: hsl(0, 0%, 100%);
				--card-foreground: hsl(152, 12%, 15%);
				--primary: hsl(151, 77%, 20%);
				--primary-foreground: hsl(0, 0%, 98%);
				--secondary: hsl(151, 30%, 95%);
				--secondary-foreground: hsl(152, 12%, 15%);
				--muted: hsl(151, 30%, 96%);
				--muted-foreground: hsl(152, 10%, 45%);
				--accent: hsl(151, 50%, 90%);
				--accent-foreground: hsl(152, 12%, 15%);
				--border: hsl(151, 25%, 88%);
				--input: hsl(151, 25%, 94%);
				--ring: hsl(151, 77%, 20%);
				--success: hsl(151, 77%, 30%);
				--priority-low: hsl(151, 50%, 85%);
				--priority-medium: hsl(151, 77%, 35%);
				--priority-high: hsl(151, 85%, 25%);
			}

			* {
				margin: 0;
				padding: 0;
				box-sizing: border-box;
			}

			body {
				font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
				background: var(--background);
				color: var(--foreground);
				min-height: 100vh;
			}

			/* Header Styles - Coincide con Header.tsx */
			.header {
				background: var(--card);
				border-bottom: 1px solid var(--border);
				position: sticky;
				top: 0;
				z-index: 50;
			}

			.header-content {
				max-width: 1200px;
				margin: 0 auto;
				padding: 1rem;
				display: flex;
				align-items: center;
				justify-content: space-between;
			}

			.logo {
				display: flex;
				align-items: center;
				gap: 0.5rem;
				margin-left: -13%;
			}

			.logo-icon {
				height: 2rem;
				width: 2rem;
				color: var(--primary);
			}

			.logo-text {
				font-size: 1.5rem;
				font-weight: bold;
				color: var(--primary);
			}

			.search-container {
				flex: 1;
				max-width: 24rem;
				margin: 0 2rem;
			}

			.search-wrapper {
				position: relative;
			}

			.search-icon {
				position: absolute;
				left: 0.75rem;
				top: 50%;
				transform: translateY(-50%);
				color: var(--muted-foreground);
				height: 1rem;
				width: 1rem;
			}

			.search-input {
				width: 100%;
				padding: 0.5rem 0.75rem 0.5rem 2.5rem;
				border: 1px solid var(--border);
				border-radius: 0.5rem;
				background: var(--background);
				color: var(--foreground);
				font-size: 0.875rem;
			}

			.search-input:focus {
				outline: none;
				border-color: var(--ring);
				box-shadow: 0 0 0 2px rgba(16, 185, 129, 0.2);
			}

			.header-actions {
				display: flex;
				align-items: center;
				gap: 0.5rem;
			}

			.header-btn {
				display: inline-flex;
				align-items: center;
				justify-content: center;
				border-radius: 0.375rem;
				font-size: 0.875rem;
				font-weight: 500;
				transition: all 0.2s;
				border: none;
				cursor: pointer;
				height: 2.5rem;
				width: 2.5rem;
			}

			.header-btn.ghost {
				background: transparent;
				color: var(--foreground);
			}

			.header-btn.ghost:hover {
				background: var(--accent);
				color: var(--accent-foreground);
			}

			.new-task-btn {
				background: var(--primary);
				color: var(--primary-foreground);
				padding: 0.5rem 1rem;
				width: auto;
				gap: 0.5rem;
			}

			.new-task-btn:hover {
				background: hsl(151, 77%, 15%);
				transform: translateY(-1px);
				box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
			}

			/* Sidebar Styles - Coincide con Sidebar.tsx */
			.layout {
				display: flex;
				height: calc(100vh - 72px);
			}

			.sidebar {
				width: 16rem;
				height: 100%;
				background: #fafbfc;
				border-right: 1px solid var(--border);
				padding: 1.5rem 1rem;
				position: relative;
				display: flex;
				flex-direction: column;
			}

			.sidebar-section {
				margin-bottom: 1.5rem;
			}

			.sidebar-section:last-child {
				margin-bottom: 0;
			}

			.sidebar-item {
				display: flex;
				align-items: center;
				justify-content: space-between;
				width: 100%;
				padding: 0.75rem;
				border-radius: 0.5rem;
				font-size: 0.875rem;
				font-weight: 500;
				transition: all 0.2s;
				background: transparent;
				border: none;
				cursor: pointer;
				text-align: left;
				margin-bottom: 0.25rem;
				color: var(--foreground);
			}

			.sidebar-item:hover {
				background: rgba(16, 185, 129, 0.1);
				color: var(--primary);
				transform: translateX(2px);
			}

			.sidebar-item.active {
				background: var(--primary);
				color: white;
				font-weight: 500;
				transform: translateX(2px);
				box-shadow: 0 2px 8px rgba(16, 185, 129, 0.3);
			}

			.sidebar-item-content {
				display: flex;
				align-items: center;
				gap: 0.75rem;
			}

			.sidebar-icon {
				height: 1rem;
				width: 1rem;
			}

			.sidebar-badge {
				margin-left: auto;
				background: var(--secondary);
				color: var(--secondary-foreground);
				padding: 0.125rem 0.5rem;
				border-radius: 9999px;
				font-size: 0.75rem;
				font-weight: 500;
			}

			.projects-header {
				display: flex;
				align-items: center;
				justify-content: space-between;
				margin-bottom: 0.75rem;
			}

			.projects-title {
				font-size: 0.875rem;
				font-weight: 500;
				color: var(--muted-foreground);
			}

			.add-project-btn {
				height: 1.5rem;
				width: 1.5rem;
				padding: 0;
				background: transparent;
				border: none;
				border-radius: 0.375rem;
				cursor: pointer;
				color: var(--muted-foreground);
			}

			.add-project-btn:hover {
				background: var(--accent);
				color: var(--accent-foreground);
			}

			.project-item {
				color: var(--foreground);
			}

			.config-section {
				margin-top: auto;
				padding-top: 1rem;
				border-top: 1px solid var(--border);
			}

			/* Main Content - Coincide con Index.tsx */
			.main-content {
				flex: 1;
				padding: 1.5rem;
				overflow: auto;
			}

			.content-wrapper {
				max-width: 64rem;
				margin: 0 auto;
			}

			.page-header {
				margin-bottom: 1.5rem;
			}

			.page-title {
				font-size: 1.875rem;
				font-weight: bold;
				color: var(--foreground);
				margin-bottom: 0.5rem;
			}

			.page-subtitle {
				color: var(--muted-foreground);
			}

			/* Task List - Coincide con TaskList.tsx y TaskCard.tsx */
			.task-list-card {
				background: var(--card);
				border: 1px solid var(--border);
				border-radius: 0.75rem;
				box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
			}

			.task-list-header {
				padding: 1.5rem 1.5rem 0.75rem 1.5rem;
			}

			.task-list-title-row {
				display: flex;
				align-items: center;
				justify-content: space-between;
			}

			.task-list-title {
				font-size: 1.125rem;
				font-weight: 600;
			}

			.task-counter-badge {
				background: var(--secondary);
				color: var(--secondary-foreground);
				padding: 0.125rem 0.5rem;
				border-radius: 9999px;
				font-size: 0.75rem;
				font-weight: 500;
			}

			.task-list-content {
				padding: 0 1.5rem 1.5rem 1.5rem;
				display: flex;
				flex-direction: column;
				gap: 0.75rem;
			}

			.task-card {
				background: white;
				border: 1px solid var(--border);
				border-radius: 12px;
				padding: 16px;
				margin-bottom: 12px;
				transition: all 0.2s ease;
				cursor: pointer;
			}

			.task-card:hover {
				border-color: var(--primary);
				box-shadow: 0 4px 12px rgba(16, 185, 129, 0.1);
				transform: translateY(-1px);
			}			.task-card.completed {
				opacity: 0.6;
			}

			.task-card-content {
				display: flex;
				align-items: flex-start;
				gap: 0.75rem;
			}

			.task-checkbox {
				width: 1.5rem;
				height: 1.5rem;
				border: 2px solid var(--muted-foreground);
				border-radius: 50%;
				background: var(--card);
				cursor: pointer;
				position: relative;
				transition: all 0.2s;
				flex-shrink: 0;
				margin-top: 0.25rem;
				display: flex;
				align-items: center;
				justify-content: center;
			}

			.task-checkbox:hover {
				border-color: var(--primary);
			}

			.task-checkbox.completed {
				background: var(--success);
				border-color: var(--success);
				color: var(--primary-foreground);
			}

			.task-details {
				flex: 1;
				min-width: 0;
			}

			.task-header {
				display: flex;
				align-items: center;
				justify-content: space-between;
				margin-bottom: 0.5rem;
			}

			.task-title {
				font-weight: 500;
				font-size: 0.875rem;
			}

			.task-title.completed {
				text-decoration: line-through;
				color: var(--muted-foreground);
			}

			.task-menu-btn {
				padding: 0.25rem;
				height: 1.5rem;
				width: 1.5rem;
				background: transparent;
				border: none;
				border-radius: 0.375rem;
				cursor: pointer;
				color: var(--muted-foreground);
			}

			.task-menu-btn:hover {
				background: var(--accent);
				color: var(--accent-foreground);
			}

			.task-description {
				font-size: 0.75rem;
				color: var(--muted-foreground);
				margin-bottom: 0.75rem;
			}

			.task-description.completed {
				text-decoration: line-through;
			}

			.task-footer {
				display: flex;
				align-items: center;
				justify-content: space-between;
			}

			.task-badges {
				display: flex;
				align-items: center;
				gap: 0.5rem;
			}

			.priority-badge {
				display: flex;
				align-items: center;
				gap: 0.25rem;
				padding: 0.25rem 0.5rem;
				border-radius: 9999px;
				font-size: 0.75rem;
				font-weight: 500;
			}

			.priority-badge .icon {
				width: 0.75rem;
				height: 0.75rem;
			}

			.priority-badge.low {
				background: var(--priority-low);
				color: var(--primary);
			}

			.priority-badge.medium {
				background: var(--priority-medium);
				color: var(--primary-foreground);
			}

			.priority-badge.high {
				background: var(--priority-high);
				color: var(--primary-foreground);
			}

			.task-date {
				display: flex;
				align-items: center;
				gap: 0.25rem;
				font-size: 0.75rem;
				color: var(--muted-foreground);
			}

			.task-date .icon {
				width: 0.75rem;
				height: 0.75rem;
			}

			.empty-state {
				text-align: center;
				color: var(--muted-foreground);
				font-style: italic;
				padding: 2rem;
			}

			.error-message {
				background: hsl(0, 84.2%, 60.2%);
				color: hsl(210, 40%, 98%);
				padding: 0.75rem;
				border-radius: 0.5rem;
				margin-bottom: 1rem;
				text-align: center;
			}

			/* Icons */
			.icon {
				display: inline-block;
				width: 1rem;
				height: 1rem;
				flex-shrink: 0;
			}

			/* Responsive Design */
			@media (max-width: 768px) {
				.layout {
					flex-direction: column;
				}
				
				.sidebar {
					width: 100%;
					height: auto;
					border-right: none;
					border-bottom: 1px solid var(--border);
					padding: 1rem;
				}

				.sidebar-section {
					margin-bottom: 1rem;
				}

				.config-section {
					margin-top: 1rem;
					padding-top: 1rem;
				}
				
				.search-container {
					max-width: 150px;
					margin: 0 0.5rem;
				}

				.header-actions {
					gap: 0.25rem;
				}

				.new-task-btn {
					padding: 0.5rem 0.75rem;
					font-size: 0.75rem;
				}

				.new-task-btn .icon {
					display: none;
				}

				.header-content {
					padding: 0.75rem 1rem;
				}

				.logo-text {
					font-size: 1.25rem;
				}

				.main-content {
					padding: 1rem;
				}

				.content-wrapper {
					max-width: 100%;
				}

				.task-card {
					padding: 0.75rem;
				}

				.task-list-header {
					padding: 1rem 1rem 0.5rem 1rem;
				}

				.task-list-content {
					padding: 0 1rem 1rem 1rem;
				}
			}
		</style>
	</head>
	<body>
		<header class="header">
			<div class="header-content">
				<div class="logo">
					<svg class="logo-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
					</svg>
					<h1 class="logo-text">TurifyTasks</h1>
				</div>
				
				<div class="search-container">
					<div class="search-wrapper">
						<svg class="search-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
						</svg>
						<input type="text" placeholder="Buscar tareas..." class="search-input">
					</div>
				</div>
				
				<div class="header-actions">
					<button class="header-btn ghost">
						<img src="../../public/icons/notification.png" alt="">
					</button>
					<button class="header-btn ghost" onclick="logout()">
						<svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
						</svg>
					</button>
					<button class="new-task-btn">
						<svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
						</svg>
						Nueva Tarea
					</button>
				</div>
			</div>
		</header>

		<div class="layout">
			<aside class="sidebar">
				<div class="sidebar-section">
					<button class="sidebar-item active" onclick="filterTasks('inbox')">
						<div class="sidebar-item-content">
							<svg class="sidebar-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z"/>
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V5a2 2 0 012-2h4a2 2 0 012 2v2"/>
							</svg>
							<span>Bandeja de entrada</span>
						</div>
						<span class="sidebar-badge" id="inboxCount">0</span>
					</button>
					<button class="sidebar-item" onclick="filterTasks('today')">
						<div class="sidebar-item-content">
							<svg class="sidebar-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
							</svg>
							<span>Hoy</span>
						</div>
						<span class="sidebar-badge" id="todayCount">0</span>
					</button>
					<button class="sidebar-item" onclick="filterTasks('upcoming')">
						<div class="sidebar-item-content">
							<svg class="sidebar-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>
							</svg>
							<span>Próximas</span>
						</div>
						<span class="sidebar-badge" id="upcomingCount">0</span>
					</button>
					<button class="sidebar-item" onclick="filterTasks('important')">
						<div class="sidebar-item-content">
							<svg class="sidebar-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z"/>
							</svg>
							<span>Importantes</span>
						</div>
						<span class="sidebar-badge" id="importantCount">0</span>
					</button>
					<button class="sidebar-item" onclick="filterTasks('completed')">
						<div class="sidebar-item-content">
							<svg class="sidebar-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 8h14M5 8a2 2 0 110-4h14a2 2 0 110 4M5 8v10a2 2 0 002 2h10a2 2 0 002-2V8m-9 4h4"/>
							</svg>
							<span>Completadas</span>
						</div>
						<span class="sidebar-badge" id="completedCount">0</span>
					</button>
				</div>

				<div class="config-section">
					<button class="sidebar-item">
						<div class="sidebar-item-content">
							<svg class="sidebar-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"/>
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
							</svg>
							<span>Configuración</span>
						</div>
					</button>
				</div>
			</aside>

			<main class="main-content">
				<div id="errorContainer"></div>

				<div class="content-wrapper">
					<div class="page-header">
						<h1 class="page-title" id="pageTitle">Bandeja de entrada</h1>
						<p class="page-subtitle">Gestiona tus tareas de manera eficiente y organizada</p>
					</div>

					<div class="task-list-card">
						<div class="task-list-header">
							<div class="task-list-title-row">
								<h2 class="task-list-title" id="sectionTitle">Bandeja de entrada</h2>
								<span id="taskCounter" class="task-counter-badge">0/0</span>
							</div>
						</div>
						<div class="task-list-content" id="tasksContainer">
							<div class="empty-state">Cargando tareas...</div>
						</div>
					</div>
				</div>
			</main>
		</div>

		<script is:inline>
// Dashboard functionality for TurifyTasks
console.log('Dashboard script loaded');

// Variables globales
let allTasks = [];
let currentFilter = 'inbox';

// Inicializar dashboard cuando el DOM esté listo
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOMContentLoaded - Dashboard iniciando');
    initializeDashboard();
});

function initializeDashboard() {
    console.log('Inicializando dashboard...');
    
    // Cargar tareas de ejemplo inmediatamente
    loadSampleTasks();
    
    // Verificar autenticación en segundo plano
    setTimeout(() => {
        checkAuthentication();
    }, 500);
}

async function checkAuthentication() {
    const token = localStorage.getItem('authToken');
    console.log('Verificando autenticación. Token:', token ? 'Presente' : 'Ausente');
    
    if (!token) {
        console.log('Sin token - modo demo');
        return;
    }

    try {
        const response = await fetch('http://localhost:3000/api/auth/profile', {
            method: 'GET',
            headers: {
                'Authorization': 'Bearer ' + token,
                'Content-Type': 'application/json'
            }
        });

        if (response.ok) {
            console.log('Autenticación válida - cargando tareas reales');
            await loadTasks();
        } else {
            console.log('Token inválido - continuando en modo demo');
        }
    } catch (error) {
        console.log('Error de conexión - continuando en modo demo');
    }
}

async function loadTasks() {
    const token = localStorage.getItem('authToken');
    
    try {
        const response = await fetch('http://localhost:3000/api/tasks', {
            method: 'GET',
            headers: {
                'Authorization': 'Bearer ' + token,
                'Content-Type': 'application/json'
            }
        });

        if (response.ok) {
            const data = await response.json();
            allTasks = data.tasks || data || [];
            console.log('Tareas cargadas desde BD:', allTasks.length);
            updateTaskCounts();
            renderTasks();
        } else {
            console.log('Error cargando tareas, manteniendo modo demo');
        }
    } catch (error) {
        console.log('Error de red, manteniendo modo demo');
    }
}

function loadSampleTasks() {
    console.log('Cargando tareas de ejemplo');
    
    allTasks = [
        {
            _id: '1',
            title: 'Revisar documentación del proyecto',
            description: 'Leer la documentación completa de TurifyTasks',
            completed: false,
            priority: 'high',
            dueDate: new Date().toISOString()
        },
        {
            _id: '2',
            title: 'Configurar base de datos',
            description: 'Establecer conexión con Turso SQLite',
            completed: false,
            priority: 'medium',
            dueDate: new Date().toISOString()
        },
        {
            _id: '3',
            title: 'Implementar autenticación',
            description: 'Sistema de login con JWT tokens',
            completed: true,
            priority: 'high',
            dueDate: new Date(Date.now() - 86400000).toISOString()
        }
    ];
    
    console.log('Tareas de ejemplo cargadas:', allTasks.length);
    updateTaskCounts();
    renderTasks();
}

function updateTaskCounts() {
    console.log('Actualizando contadores...');
    const today = new Date().toDateString();
    
    const counts = {
        inbox: allTasks.filter(task => !task.completed).length,
        today: allTasks.filter(task => {
            const taskDate = new Date(task.dueDate || task.createdAt).toDateString();
            return taskDate === today && !task.completed;
        }).length,
        upcoming: allTasks.filter(task => {
            const taskDate = new Date(task.dueDate || task.createdAt);
            return taskDate > new Date() && !task.completed;
        }).length,
        important: allTasks.filter(task => task.priority === 'high' && !task.completed).length,
        completed: allTasks.filter(task => task.completed).length
    };

    console.log('Contadores calculados:', counts);

    // Actualizar elementos si existen
    const inboxCount = document.getElementById('inboxCount');
    const todayCount = document.getElementById('todayCount');
    const upcomingCount = document.getElementById('upcomingCount');
    const importantCount = document.getElementById('importantCount');
    const completedCount = document.getElementById('completedCount');

    if (inboxCount) inboxCount.textContent = counts.inbox;
    if (todayCount) todayCount.textContent = counts.today;
    if (upcomingCount) upcomingCount.textContent = counts.upcoming;
    if (importantCount) importantCount.textContent = counts.important;
    if (completedCount) completedCount.textContent = counts.completed;
}

function filterTasks(filterType) {
    console.log('Filtrando tareas:', filterType);
    currentFilter = filterType;
    
    // Actualizar sidebar activo
    document.querySelectorAll('.sidebar-item').forEach(item => {
        item.classList.remove('active');
    });
    
    if (event && event.target && event.target.closest) {
        event.target.closest('.sidebar-item').classList.add('active');
    }

    // Actualizar títulos
    const titles = {
        inbox: 'Bandeja de entrada',
        today: 'Tareas de hoy',
        upcoming: 'Próximas tareas',
        important: 'Tareas importantes',
        completed: 'Tareas completadas'
    };

    const pageTitle = document.getElementById('pageTitle');
    const sectionTitle = document.getElementById('sectionTitle');
    
    if (pageTitle) pageTitle.textContent = titles[filterType];
    if (sectionTitle) sectionTitle.textContent = titles[filterType];

    renderTasks();
}

function renderTasks() {
    console.log('Renderizando tareas para filtro:', currentFilter);
    
    const container = document.getElementById('tasksContainer');
    if (!container) {
        console.error('Contenedor de tareas no encontrado');
        return;
    }

    const today = new Date().toDateString();
    let filteredTasks = [];

    switch (currentFilter) {
        case 'inbox':
            filteredTasks = allTasks.filter(task => !task.completed);
            break;
        case 'today':
            filteredTasks = allTasks.filter(task => {
                const taskDate = new Date(task.dueDate || task.createdAt).toDateString();
                return taskDate === today && !task.completed;
            });
            break;
        case 'upcoming':
            filteredTasks = allTasks.filter(task => {
                const taskDate = new Date(task.dueDate || task.createdAt);
                return taskDate > new Date() && !task.completed;
            });
            break;
        case 'important':
            filteredTasks = allTasks.filter(task => task.priority === 'high' && !task.completed);
            break;
        case 'completed':
            filteredTasks = allTasks.filter(task => task.completed);
            break;
        default:
            filteredTasks = allTasks;
    }

    console.log('Tareas filtradas:', filteredTasks.length);

    // Actualizar contador
    const completedCount = filteredTasks.filter(task => task.completed).length;
    const totalCount = filteredTasks.length;
    const taskCounter = document.getElementById('taskCounter');
    if (taskCounter) {
        taskCounter.textContent = completedCount + '/' + totalCount;
    }

    if (filteredTasks.length === 0) {
        container.innerHTML = '<div class="empty-state">No hay tareas en esta lista</div>';
        return;
    }

    const tasksHtml = filteredTasks.map(task => {
        const taskId = task._id || task.id;
        const isCompleted = task.completed ? 'completed' : '';
        const checkIcon = task.completed ? '<svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/></svg>' : '';
        const priorityText = task.priority === 'high' ? 'Alta' : task.priority === 'medium' ? 'Media' : 'Baja';
        
        return '<div class="task-card ' + isCompleted + '">' +
            '<div class="task-card-content">' +
                '<button class="task-checkbox ' + isCompleted + '" onclick="toggleTask(\'' + taskId + '\')">' +
                    checkIcon +
                '</button>' +
                '<div class="task-details">' +
                    '<div class="task-header">' +
                        '<h3 class="task-title ' + isCompleted + '">' + escapeHtml(task.title) + '</h3>' +
                    '</div>' +
                    (task.description ? '<p class="task-description ' + isCompleted + '">' + escapeHtml(task.description) + '</p>' : '') +
                    '<div class="task-footer">' +
                        '<div class="task-badges">' +
                            '<div class="priority-badge ' + task.priority + '">' +
                                '<svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">' +
                                    '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"/>' +
                                '</svg>' +
                                priorityText +
                            '</div>' +
                        '</div>' +
                    '</div>' +
                '</div>' +
            '</div>' +
        '</div>';
    }).join('');

    container.innerHTML = tasksHtml;
    console.log('Tareas renderizadas exitosamente');
}

async function toggleTask(taskId) {
    console.log('Cambiando estado de tarea:', taskId);
    const task = allTasks.find(t => (t._id || t.id) === taskId);
    if (!task) return;

    task.completed = !task.completed;
    updateTaskCounts();
    renderTasks();

    // Intentar actualizar en el backend si hay token válido
    const token = localStorage.getItem('authToken');
    if (token && !token.startsWith('test-token')) {
        try {
            await fetch('http://localhost:3000/api/tasks/' + taskId, {
                method: 'PUT',
                headers: {
                    'Authorization': 'Bearer ' + token,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(task)
            });
            console.log('Tarea actualizada en backend');
        } catch (error) {
            console.log('Error actualizando en BD, continuando en modo local');
        }
    }
}

function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

async function logout() {
    localStorage.removeItem('authToken');
    if (confirm('¿Deseas ir al login?')) {
        window.location.href = '/login';
    } else {
        location.reload();
    }
}

// Hacer las funciones disponibles globalmente
window.filterTasks = filterTasks;
window.toggleTask = toggleTask;
window.logout = logout;

console.log('Dashboard script completamente cargado');
		</script>
	</body>
</html>
